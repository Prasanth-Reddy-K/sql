create TABLE CAR( CARNO INT , NAME VARCHAR(20), PRICE INT, QUALITY INT);
INSERT INTO CAR VALUES(112, "TESLA", 120000, 2),(113,"BMW", 1300000, 3),(114, "tATA", 1400000, 4)
SELECT * FROM CAR;
SELECT NAME, PRICE FROM CAR GROUP BY PRICE;
SELECT COUNT(NAME), PRICE FROM CAR GROUP BY PRICE
SELECT COUNT(CAR_NAME),CAR_PRICE FROM CAR GROUP BY CAR_PRICE;

SELECT COUNT(CAR_NAME) AS COUNT_NUMBER,CAR_PRICE FROM CAR GROUP BY CAR_PRICE;

SELECT COUNT(CAR_NAME) FROM CAR GROUP BY CAR_PRICE HAVING CAR_PRICE >120000;

SELECT COUNT(*) FROM CAR GROUP BY CAR_PRICE HAVING CAR_PRICE >120000;-- COUNT THE NO.OF CARS HAVING CAR_PRICE AS >120000
 
 SELECT * FROM CUSTOMER;
 
SELECT CITY,COUNT(*) AS CUSTOMER_CITY FROM CUSTOMER GROUP BY CITY; 

create table vist(
entry_date date,
price int,
duration int
);
insert into vist values("2023-5-1",1000,20),("2023-5-1",2000,30),("2023-6-20",3000,45),("2023-6-20",4000,60),("2023-07-10",500,60),("2023-07-10",5000,30);
select * from vist;

-- extract keyword is uesd to get part from a given date
   syn:  EXTRACT(part from date
SELECT EXTRACT(YEAR FROM ENTRY_DATE) AS YEAR ,
EXTRACT(MONTH FROM ENTRY_DATE) AS MONTH,
ROUND(AVG(PRICE),3) FROM VISIT
GROUP BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE)
ORDER BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE);      

SELECT * FROM VISIT;
 SELECT ENTRY_DATE, ROUND(AVG(PRICE) FROM VISIT GROUP BY ENTRYDATE HAVING COUNT(*)>1 ORDER BY eNTRY_DATE; 

SELECT ENTRY_DATE, ROUND(AVG(PRICE) FROM VISIT GROUP BY ENTRYDATE HAVING COUNT(*)>4 ORDER BY eNTRY_DATE;

SELECT ENTRY_DATE, ROUND(AVG(PRICE) FROM VISIT  WHERE DURATION >30 GROUP BY ENTRY_DATE HAVING COUNT(*)<>1 ORDER BY eNTRY_DATE;
SELECT ENTRY_DATE, ROUND(AVG(PRICE),3) AS AVG_PRICE FROM VISIT GROUP BY ENTRY_DATE HAVING COUNT(*) > 1 ORDER BY ENTRY_DATE;

SELECT ENTRY_DATE, ROUND(AVG(PRICE),3) AS AVG_PRICE FROM VISIT GROUP BY ENTRY_DATE HAVING COUNT(*) > 3 ORDER BY ENTRY_DATE;

SELECT ENTRY_DATE, ROUND(AVG(PRICE),3) AS AVG_PRICE FROM VISIT WHERE DURATION >30
 GROUP BY ENTRY_DATE HAVING COUNT(*) > 1 ORDER BY ENTRY_DATE ;
 
CREATE TABLE EMPLOYEE(EMPID  INT, NAME VARCHAR(30), AGE INT , COUNTRY VARCHAR(30));
iNSERT INTO EMPLOYEE VALUES(100, "PRASANTH",20, 'INDIA'),(102, 'SAHIL', 21,'UK'), (104, 'RAHUL', 22, 'USA'), (103, ''HARI', 23, 'SOUTH');
CREATE TABLE MANAGER(
ID INT,NAME VARCHAR(30),GENDER VARCHAR(20),SALARY INT);
DROP TABLE MANAGER;
CREATE TABLE MANAGER1(
ID INT,NAME VARCHAR(30),GENDER VARCHAR(20),AGE INT,SALARY INT);
INSERT INTO MANAGER1 VALUES(101,'SWAPNA','F',20,100000),(102,'SWATHI','F',20,200000),(103,'SWETHA','F',22,400000),(141,'SUMANTH','M',21,100000),
(105,'RAHUL','M',24,12000);


SELECT * FROM MANAGER1;

SELECT NAME,SUM(SALARY) AS TOTAL_SALARY FROM MANAGER1 GROUP BY NAME HAVING SUM(SALARY) >100000 ORDER BY NAME;

SELECT AGE FROM MANAGER1 GROUP BY AGE HAVING COUNT(AGE) >2;

SELECT AGE FROM MANAGER1 GROUP BY AGE HAVING COUNT(AGE) >1;

SELECT GENDER,MAX(SALARY) AS MAX_SALARY FROM MANAGER1 GROUP BY GENDER HAVING MAX(SALARY) <200000;

SELECT GENDER,MIN(SALARY) AS MAX_SALARY FROM MANAGER1 GROUP BY GENDER HAVING MIN(SALARY) <200000;

CREATE PROCEDURE GETMANAGER()
   BEGIN 
     SELECT * FROM MANAGER1;
   END
 CALL GETMANAGER()

CREATE PROCEDURE GETMANAGER()
   BEGIN 
     SELECT * FROM MANAGER1 WHERE AGE =20;
   END
 CALL GETMANAGER()
